function [ensemble] = GA_4_Ensemble(ensemble, Network, type, var, sets)
%Function to apply  a GA to evolve ensembles

%%%%%% Variables %%%%%%
sizeInd = size(Network,2);         %that will be the size of the genotype
sizePop = 40;
maxGen  = 5;
EliteNo = 2;
toSelect = sizePop;				%parents to select
%%%%%%%%%%%%%%%%%%%%%%%

%set up space for the population and Offsrping, and set all to zero
Population = [];
Offspring = [];
tempPop = [];

Population = initPop2zero(Population, sizePop, sizeInd, type);
Offspring = initPop2zero(Offspring, sizePop, sizeInd, type);
tempPop = initPop2zero(tempPop, sizePop, sizeInd, type);

fitnessInv = zeros(sizePop,1); 

rand('twister',sum(100*clock));               %initialize the random number

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%generate initial population
Population = initpop(Population,sizeInd,sizePop,type);

%Main loop
generation = 1;
while(generation <= maxGen)
    generation

    %Eval fitness of each individual
    Population.fitness = eval_fitness(Population,sizeInd,sizePop, ...
        Network, type, var, sets.toPredictI_norm);

    %Sort the individuals only to obtain the Elite, I do not if is better
    %to do this or the preform a search for the two best and extract them    
    tempPop = initPop2zero(tempPop, sizePop, sizeInd, type);
    tempPop = sort_Pop(Population,type);
    
    Offspring = initPop2zero(Offspring, sizePop, sizeInd, type);  %put in blank
    Offspring = elite(Offspring, tempPop, EliteNo, type);
    %Put in the Offspring the two best individulas
    
    
    %Select the indiviudals    SELECTION


    generation = generation + 1;
end
 
       

%         
% 
% 		//find the minimum
%         min_temp = fitness_Pop[0];
%         pos_min = 0;
%         for(i=1; i< population; i++)
%         {
%             if(fitness_Pop[i] < min_temp)
%             {
%                 min_temp = fitness_Pop[i];
%                 pos_min = i;
%             }
%         }
%         
%         // printf the best individual found    
%         printf("fitness best %f\n",min_temp);
%         printf("pos min %d\n Best individual found\n",pos_min);
%         for(i=0; i<size_ind; i++)
%             printf("%c ",Population[pos_min][i]);
%         printf("\n");
% 
% 		if((generation > maxGen) || (min_temp == 0))  
% 			break;									//stop the algorithm
% 
% 
% 
%         //print the fitness of each individual
%         if(band==1)print_fitness();
%         
%         //select parents, apply crossover and mutate
%         selection();
%         
%         //replace the old population by the offspring
%         for(i=0; i<population; i++)
%         {
%             for(j=0; j<size_ind; j++)
%             {
%                 Population[i][j] = Offspring[i][j];
%             }
%         }
%         
%        
%    		
%     
%     return 0;
% }
% 
% 
% 


 
% void selection(void)
% {
%     //roulette-wheel selection
%     int i,j;
%     double sum=0;
%     double Prob[population];        //probabilities
%     double rand_temp;
%     double limit_prob[population];  //to know the limits/border of each individual given the Prob
%     int Selected[toSelect];
%     int point_2cross;
%     int point_2mutate;
%     
%     
%     int a=1;                //not allow to fall in 0
%     int b=size_ind-1;       // or 11 (size of genotype) - you can change this and see what happen
%     
%     // -----------
%     for(i=0; i<population; i++){
%         sum += fitness_Pop_inv[i];
%         Prob[i] = 0;        // init to 0
%         limit_prob[i] = 0;  // init to 0
%         Selected[i] = 0;    // check here Selected need to be equal to population
%     }
%     
%     if(band==1)printf("\n-- Probabilities --\n");		
%     for(i=0; i<population; i++){
%         Prob[i] = fitness_Pop_inv[i]/sum;				//calculate probabilities for each individual
%         if(band==1)printf("Prob1 %f \n",Prob[i]);        
%     }
%     
%     if(band==1)getchar();          //wait, you can put away this
%     
%     sum=0;
%     if(band==1)printf("\nPrint limits\n");
%     for(i=0; i<population; i++){					//to obtain the boundaries of each individual
%         sum += Prob[i];
%         limit_prob[i] = sum;
%         if(band==1)printf("%f \n",limit_prob[i]);
%         
%     }
%     // now each individual has a boundary, with a random we can now choose one parent
%     // |-----|------------|----|------------------|--------------| ... --|
%     //   ind1    ind2      ind3   ...                                  ind n-1
%     
%     
%     //Selection
%     
%     //check out where it falls to chose a parent
%     
%     if(band==1)printf("\n ---Selected ---\n");
%     for(j=0; j<toSelect; j++)   // repeat to select n parents
%     {
%         rand_temp = rando();
%         for(i=0; i<population; i++){        //to know where it falls
%             if(rand_temp <= limit_prob[i])
%             {
%                Selected[j] = i;
%                break;
%             }
%         }
%         if(band==1)printf("%d\n",Selected[j]);
%     }
%     
%     // now apply crossover between parent chosen 0-1, 2-3, 4-5, 6-7 and 8-9
%     
%     //flip the bits croosover one-point
%     for(i=0; i<population; i+=2)
%     {
%         point_2cross = (int)(a + (b-a) * rando());  //create a random number between 'a' and 'b'
%         for(j=0; j<size_ind; j++)
%         {
%             if(j < point_2cross)        //copy the original values to offspring
%             {
%                 Offspring[i][j] = Population[Selected[i]][j];
%                 Offspring[i+1][j] = Population[Selected[i+1]][j];
%             }
%             else                        //interchange bits
%             {
%                 Offspring[i][j] = Population[Selected[i+1]][j];
%                 Offspring[i+1][j] = Population[Selected[i]][j];
%             }    
%         }
%     }
%     // This section only prints the population////////////////////////
%     if(band==1)printf("\n *** Population after crossover *** \n");
%     for(i=0; i<population; i++)
%     {
%         for(j=0; j<size_ind; j++)
%         {
%             if(band==1)printf("%c ",Offspring[i][j]);
%         }
%         if(band==1)printf("\n");
%     }//////////////////////////////////////////////////////////////////
%             
%     //Apply mutation, only one bit is change here    
%     int aa=0, bb=size_ind-1;				//new values, from aa to bb can falls the random
%     
%     for(i=0; i<population; i++)
%     {
%         point_2mutate = (int)(aa + (bb-aa) * rando());
%         
%         if (Offspring[i][point_2mutate] == '0')
%             Offspring[i][point_2mutate] = '1';
%         else
%             Offspring[i][point_2mutate] = '0';
%     }
%     //This section only prints the new oofsprings ////////////////////
%     if(band==1)printf("\n *** Population after Mutation *** \n");
%     for(i=0; i<population; i++)
%     {
%         for(j=0; j<size_ind; j++)
%         {
%             if(band==1)printf("%c ",Offspring[i][j]);
%         }
%         if(band==1)printf("\n");
%     }/////////////////////////////////////////////////////////////////
% }
% 
% /*You can improve this code (maybe optimize) and create more functions as needed
% but not that for academic purpose you must create your own implementation*/
% 
% 
% 
%     


