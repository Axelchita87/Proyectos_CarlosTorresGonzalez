<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvbq2PFY2jssvAIbePQmJ1zsIiNc7CInXOwiJ1zYE
        heFcN52EjXWwAcjDxAGanpJxM1MO4S1PA9c0VAnXM1MI1zNUCNcyUwfdNVULxwAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSzrEIpJ+lpiQc
        pP8QB7T/GhCy/xkPsv8aEbP/GA+x/xsSs/9PScN+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMbC
        uwGvq6pjbmmO52Rek/BoY5XtaWKV7While1lX5Hwcm+f0amm1EEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////8AAB//AEAf/wBAH/8AQB//AGAf4A
        AAH8AAAB/AAAAfwAAD/8AIA/gAAAAYAAAAGAAAABgAAAAYAwBgGAAAQBgAAAAYAABAGAAAQB/AH///gB
        ///4Af//+AH///////////////////////8=
</value>
  </data>
</root>